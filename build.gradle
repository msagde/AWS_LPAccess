buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'  // code coverage
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    jcenter()
    mavenCentral()
}



ext.deps = [
    junit     : '4.12',
    logback   : '1.1.3'
]


project.ext.set('nativeLibsDir', "${buildDir}/resources/sigar")

configurations {
    nativeBundle
}


// In this section you declare the dependencies for your production and test code
dependencies {

    implementation group: 'software.amazon.awssdk', name: 'protocol-core', version: '2.16.39'
    implementation group: 'software.amazon.awssdk', name: 'regions', version: '2.16.39'
    implementation group: 'software.amazon.awssdk', name: 'services', version: '2.16.39'
    implementation group: 'software.amazon.awssdk', name: 'organizations', version: '2.16.39'
    implementation group: 'software.amazon.awssdk', name: 's3', version: '2.16.39'
    implementation group: 'software.amazon.awssdk', name: 'iam', version: '2.16.39'
    implementation group: 'software.amazon.awssdk', name: 'cloudtrail', version: '2.16.39'
    implementation group: 'software.amazon.awssdk', name: 'apache-client', version: '2.16.37'

    compile group: 'software.amazon.awssdk', name: 'protocol-core', version: '2.16.39'
    compile group: 'software.amazon.awssdk', name: 'regions', version: '2.16.39'
    compile group: 'software.amazon.awssdk', name: 'services', version: '2.16.39'
    compile group: 'software.amazon.awssdk', name: 'organizations', version: '2.16.39'
    compile group: 'software.amazon.awssdk', name: 's3', version: '2.16.39'
    compile group: 'software.amazon.awssdk', name: 'iam', version: '2.16.39'
    compile group: 'software.amazon.awssdk', name: 'cloudtrail', version: '2.16.39'
    compile group: 'software.amazon.awssdk', name: 'apache-client', version: '2.16.37'

    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.0.1'

    compile 'org.slf4j:log4j-over-slf4j:1.6.4'
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'ch.qos.logback:logback-core:1.1.3'

    compile 'com.google.guava:guava:19.0'
    compile  group: 'com.google.code.gson', name: 'gson', version: '2.6.2'

    compile 'com.typesafe:config:1.2.0'
}

configurations.all {
    resolutionStrategy {
        force 'com.cisco.iotsp:iot-data-services-common:2.8.0.13-SNAPSHOT'
    }
}


jar {
  manifest {
        attributes 'Main-Class': 'com.exp.aws.LPAReport'
    }
}

jar.enabled = false

shadowJar {
  zip64 true
  transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
    resource = 'reference.conf'
  }
}

build.dependsOn shadowJar

//code coverage
jacoco {
    reportsDir = file("$buildDir/reports/codecoverage")
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task extractNativeBundle(type: Sync) {
    from {
        configurations.nativeBundle.collect { zipTree(it) }
    }
    into file(project.nativeLibsDir)
}

test {
    dependsOn extractNativeBundle
    systemProperty "java.library.path", project.nativeLibsDir
}

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}
